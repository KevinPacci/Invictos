Metadata-Version: 2.4
Name: invictos
Version: 0.1.0
Summary: Invictos bet tracker desktop app
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.110.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: sqlmodel>=0.0.14
Requires-Dist: flet>=0.11.0
Requires-Dist: requests>=2.31.0
Requires-Dist: typer>=0.9.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: httpx>=0.25; extra == "dev"

# Invictos Desktop Tracker

Aplicacion de escritorio (Python + Flet) con backend FastAPI/SQLite para registrar y sincronizar apuestas deportivas.

## Requisitos
- Python 3.11 o superior
- pip / entorno virtual

## Instalacion rapida
```bash
python -m venv .venv
.venv\Scripts\activate
pip install -e .
```

## Comandos principales
```bash
# Iniciar backend (FastAPI + SQLite)
invictos backend --host 0.0.0.0 --port 8000

# Lanzar la app de escritorio (Flet)
invictos client

# Cargar datos de demostracion (opcional)
invictos seed
```

> Tambien podes usar `python -m backend` y `python -m client` si preferis evitar el entrypoint.

## Configuracion
- `INVICTOS_DB_URL`: Ruta a la base SQLite (por defecto `sqlite:///./invictos.db`).
- `INVICTOS_API_KEY`: Token simple para proteger el API. Si se define, la app y las llamadas HTTP deben mandar el header `x-api-key`.
- `INVICTOS_API_URL`: URL del backend que consumira la app (por defecto `http://127.0.0.1:8000`).
- `INVICTOS_CACHE_DIR`: Carpeta local para cache y cola offline (por defecto `~/.invictos`).

## Flujo de sincronizacion
1. El cliente arranca leyendo su cache local (`bets_cache.json`).
2. Se intentan enviar operaciones pendientes (`pending_ops.json`).
3. Al presionar **Sincronizar** (o al primer arranque sin datos locales) se consulta `GET /bets` y se reemplaza el estado local.
4. Cualquier cambio (crear, editar resultado/cashout, eliminar) intenta persistirse al API. Si no hay red, se guarda en la cola y se reintenta al siguiente arranque.

> Las eliminaciones se reflejan inmediatamente en la UI local. Cuando vuelva la conexion se propagaran al backend.

## Estructura
```
backend/   -> FastAPI + SQLModel
client/    -> UI Flet, almacenamiento offline y cola de sincronizacion
docs/      -> Notas de arquitectura / decisiones
invictos.py -> CLI Typer
```

## Empaquetado y despliegue
- **Desktop:** `flet pack client/app.py --name "Invictos" --icon path/a/icono.ico` genera ejecutables nativos.
- **Backend:** se puede subir a servicios como Railway, Render o Fly. Exporta `INVICTOS_DB_URL` apuntando a una ubicacion persistente (ej. Postgres) y habilita HTTPS.

## Limitaciones conocidas
- La sincronizacion descarga un snapshot completo (`GET /bets`). Para volumenes grandes conviene extender `/sync` con marcadores de borrado.
- No hay resolucion automatica de conflictos en cambios simultaneos; gana el ultimo `updated_at` que llegue al backend.
- Falta una capa de autenticacion robusta (solo API key simple).

Revisa `docs/ARQUITECTURA.md` para mas detalles tecnicos.

